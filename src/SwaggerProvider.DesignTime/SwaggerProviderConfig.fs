namespace SwaggerProvider

open System.Reflection
open ProviderImplementation.ProvidedTypes
open Microsoft.FSharp.Core.CompilerServices
open Microsoft.FSharp.Quotations
open System
open System.Runtime.Caching
open FSharp.Data
open SwaggerProvider.Internal.Schema
open SwaggerProvider.Internal.Schema.Parsers
open SwaggerProvider.Internal.Compilers

module private SwaggerProviderConfig =
    let NameSpace = "SwaggerProvider"

    let internal typedSwaggerProvider runtimeAssemlby =
        let asm = Assembly.LoadFrom runtimeAssemlby

        let swaggerProvider = ProvidedTypeDefinition(asm, NameSpace, "SwaggerProvider", Some typeof<obj>, IsErased = false)

        let staticParams =
            [ ProvidedStaticParameter("Schema", typeof<string>)
              ProvidedStaticParameter("Headers", typeof<string>,"")
              ProvidedStaticParameter("IgnoreOperationId", typeof<bool>, false)
              ProvidedStaticParameter("EmbeddedResource", typeof<string>, "")]

        let tryReadResource (resourceName:string) =

            let tryGetAssemblyBySimpleName (simpleName:string) =
                System.AppDomain.CurrentDomain.GetAssemblies()
                |> Array.tryFind (fun a -> a.FullName.Contains(simpleName))                       

            match resourceName.Split(',') with
            | [| asmName; name |] ->  
                let asmNameTMP = System.IO.Path.GetFileNameWithoutExtension(asmName)
                match tryGetAssemblyBySimpleName asmNameTMP with
                | Some assembly ->
                    use stream = assembly.GetManifestResourceStream(name.Trim())              
                    use reader = new System.IO.StreamReader(stream)
                    Some (reader.ReadToEnd())
                | None -> None 
            | _ -> None

        //TODO: Add use operationID flag
        swaggerProvider.AddXmlDoc
            """<summary>Statically typed Swagger provider.</summary>
               <param name='Schema'>Url or Path to Swagger schema file.</param>
               <param name='Headers'>Headers that will be used to access the schema.</param>
               <param name='IgnoreOperationId'>IgnoreOperationId tells SwaggerProvider not to use `operationsId` and generate method names using `path` only. Default value `false`</param>
               <param name='EmbeddedResource'>When specified, the type provider first attempts to load the sample from the specified resource 
                (e.g. 'MyCompany.MyAssembly, resource_name.json'). This is useful when exposing types generated by the type provider.</param>"""

        swaggerProvider.DefineStaticParameters(
            parameters=staticParams,
            instantiationFunction = (fun typeName args ->
                let schemaPathRaw = args.[0] :?> string
                let ignoreOperationId = args.[2] :?> bool
                let resource = args.[3] :?> string
                let schemaData =
                    match tryReadResource resource with
                    | Some resourceStr -> resourceStr
                    | None ->
                        match schemaPathRaw.StartsWith("http", true, null) with
                        | true  ->
                            let headersStr = args.[1] :?> string
                            let headers =
                                headersStr.Split('|')
                                |> Seq.choose (fun x ->
                                    let pair = x.Split('=')
                                    if (pair.Length = 2)
                                    then Some (pair.[0],pair.[1])
                                    else None
                                )
                            Http.RequestString(schemaPathRaw, headers=headers,
                                customizeHttpRequest = fun req ->
                                    req.Credentials <- System.Net.CredentialCache.DefaultNetworkCredentials
                                    req)
                        | false ->
                            schemaPathRaw |> IO.File.ReadAllText

                let schema =
                    if schemaData.Trim().StartsWith("{")
                    then JsonValue.Parse  schemaData |> JsonNodeAdapter |> Parser.parseSwaggerObject
                    else YamlParser.Parse schemaData |> YamlNodeAdapter |> Parser.parseSwaggerObject

                // Create Swagger provider type
                let baseTy = Some typeof<SwaggerProvider.Internal.ProvidedSwaggerBaseType>
                let ty = ProvidedTypeDefinition(asm, NameSpace, typeName, baseTy, IsErased = false)
                ty.AddXmlDoc ("Swagger.io Provider for " + schema.Host)
                ty.HideObjectMethods <- true

                let protocol =
                    match schema.Schemes with
                    | [||]  -> "http" // Should use the scheme used to access the Swagger definition itself.
                    | array -> array.[0]
                let ctor =
                    ProvidedConstructor(
                        [ProvidedParameter("host", typeof<string>,
                            optionalValue = sprintf "%s://%s" protocol schema.Host)],
                        InvokeCode = fun args ->
                            match args with
                            | [] -> failwith "Generated constructors should always pass the instance as the first argument!"
                            | _ -> <@@ () @@>)
                ctor.BaseConstructorCall <-
                    let baseCtor = baseTy.Value.GetConstructors().[0]
                    fun args -> (baseCtor, args)
                ty.AddMember ctor

                let defCompiler = DefinitionCompiler(schema)
                let opCompiler = OperationCompiler(schema, defCompiler)
                ty.AddMembers <| opCompiler.CompilePaths(ignoreOperationId) // Add all operations
                ty.AddMembers <| defCompiler.GetProvidedTypes() // Add all compiled types

                let tempAsmPath = System.IO.Path.ChangeExtension(System.IO.Path.GetTempFileName(), ".dll")
                let tempAsm = ProvidedAssembly tempAsmPath
                tempAsm.AddTypes [ty]

                ty
            ))
        swaggerProvider


